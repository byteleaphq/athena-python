"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from athenacopilotsdk import utils
from dataclasses_json import Undefined, dataclass_json
from typing import Optional


@dataclasses.dataclass
class ActiveFeatures:
    r"""Active features of the brain. Currently used internally"""
    



@dataclasses.dataclass
class MetadataSchema:
    r"""Metadata schema for the brain"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Brain:
    UNSET='__SPEAKEASY_UNSET__'
    active_features: Optional[ActiveFeatures] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_features'), 'exclude': lambda f: f is Brain.UNSET }})
    r"""Active features of the brain. Currently used internally"""
    brain_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brain_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the brain"""
    created_on: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_on'), 'exclude': lambda f: f is None }})
    r"""Timestamp when the brain was created"""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the brain"""
    document_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_count'), 'exclude': lambda f: f is None }})
    r"""Number of documents in the brain"""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the brain (same as brain_id)"""
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language_code'), 'exclude': lambda f: f is None }})
    r"""Language code of the brain"""
    metadata_schema: Optional[MetadataSchema] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata_schema'), 'exclude': lambda f: f is Brain.UNSET }})
    r"""Metadata schema for the brain"""
    org_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('org_uuid'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the organization"""
    storage_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage_bytes'), 'exclude': lambda f: f is None }})
    r"""Total storage size of the brain in bytes"""
    supp_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supp_id'), 'exclude': lambda f: f is None }})
    r"""Supplementary identifier for the brain"""
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title or name of the brain"""
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the brain (e.g., unstructured, structured)"""
    updated_on: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_on'), 'exclude': lambda f: f is None }})
    r"""Timestamp when the brain was last updated"""
    

